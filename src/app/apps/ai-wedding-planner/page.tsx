"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  Sparkles,
  Calendar,
  Users,
  Flower,
  ChefHat,
  Camera,
  Music,
  Heart,
  Lightbulb,
  Download,
  RefreshCw
} from "lucide-react";
import { aiChatSafe } from "@/lib/ai";

interface WeddingPlan {
  timeline: string[];
  vendorRecommendations: string[];
  seasonalConsiderations: string[];
  budgetBreakdown: string[];
  personalizedTips: string[];
}

export default function AIWeddingPlanner() {
  const [coupleInfo, setCoupleInfo] = useState({
    brideName: "",
    groomName: "",
    weddingDate: "",
    guestCount: "",
    budget: "",
    weddingStyle: "",
    specialRequests: "",
    dietaryRestrictions: "",
    colorScheme: "",
    venuePreferences: "outdoor"
  });

  const [weddingPlan, setWeddingPlan] = useState<WeddingPlan | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const generateWeddingPlan = async () => {
    setLoading(true);
    setError("");

    try {
      const prompt = `Create a comprehensive wedding planning guide for Little Bow Meadows farm-to-table wedding venue. Here are the couple's details:

Bride: ${coupleInfo.brideName}
Groom: ${coupleInfo.groomName}
Date: ${coupleInfo.weddingDate}
Guests: ${coupleInfo.guestCount}
Budget: ${coupleInfo.budget}
Style: ${coupleInfo.weddingStyle}
Special Requests: ${coupleInfo.specialRequests}
Dietary Needs: ${coupleInfo.dietaryRestrictions}
Colors: ${coupleInfo.colorScheme}
Venue: ${coupleInfo.venuePreferences}

Please provide:
1. Detailed wedding day timeline (from morning to evening)
2. Recommended local vendors and suppliers
3. Seasonal floral and farm-fresh element suggestions
4. Budget breakdown by category
5. Personalized tips for their specific preferences

Format as JSON with keys: timeline, vendorRecommendations, seasonalConsiderations, budgetBreakdown, personalizedTips`;

      const response = await aiChatSafe({
        messages: [{ role: "user", content: prompt }],
        scope: "wedding",
        maxTokens: 800,
        temperature: 0.7
      });

      if (response.ok) {
        try {
          // Extract JSON from the response
          const jsonMatch = response.content.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const parsedPlan = JSON.parse(jsonMatch[0]);
            setWeddingPlan(parsedPlan);
          } else {
            setError("Failed to parse AI response. Please try again.");
          }
        } catch (parseError) {
          setError("Error parsing wedding plan. Please try again.");
        }
      } else {
        setError(response.error || "Failed to generate wedding plan");
      }
    } catch (err) {
      setError("Network error. Please check your connection and try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setCoupleInfo(prev => ({ ...prev, [field]: value }));
  };

  const exportPlan = () => {
    if (!weddingPlan) return;

    const planText = `
LITTLE BOW MEADOWS WEDDING PLAN
For: ${coupleInfo.brideName} & ${coupleInfo.groomName}
Date: ${coupleInfo.weddingDate}

WEDDING DAY TIMELINE:
${weddingPlan.timeline.map(item => `• ${item}`).join('\n')}

VENDOR RECOMMENDATIONS:
${weddingPlan.vendorRecommendations.map(item => `• ${item}`).join('\n')}

SEASONAL CONSIDERATIONS:
${weddingPlan.seasonalConsiderations.map(item => `• ${item}`).join('\n')}

BUDGET BREAKDOWN:
${weddingPlan.budgetBreakdown.map(item => `• ${item}`).join('\n')}

PERSONALIZED TIPS:
${weddingPlan.personalizedTips.map(item => `• ${item}`).join('\n')}

Generated by Little Bow Meadows AI Wedding Planner
    `.trim();

    const blob = new Blob([planText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `wedding-plan-${coupleInfo.brideName}-${coupleInfo.groomName}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">AI Wedding Planner</h1>
          <p className="text-muted-foreground">Create personalized wedding plans powered by AI</p>
        </div>
        <Badge variant="secondary" className="flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          AI Powered
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Heart className="h-5 w-5" />
              Couple Information
            </CardTitle>
            <CardDescription>
              Tell us about the happy couple and their vision
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="brideName">Bride's Name</Label>
                <Input
                  id="brideName"
                  value={coupleInfo.brideName}
                  onChange={(e) => handleInputChange("brideName", e.target.value)}
                  placeholder="Enter bride's name"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="groomName">Groom's Name</Label>
                <Input
                  id="groomName"
                  value={coupleInfo.groomName}
                  onChange={(e) => handleInputChange("groomName", e.target.value)}
                  placeholder="Enter groom's name"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="weddingDate">Wedding Date</Label>
                <Input
                  id="weddingDate"
                  type="date"
                  value={coupleInfo.weddingDate}
                  onChange={(e) => handleInputChange("weddingDate", e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="guestCount">Number of Guests</Label>
                <Input
                  id="guestCount"
                  type="number"
                  value={coupleInfo.guestCount}
                  onChange={(e) => handleInputChange("guestCount", e.target.value)}
                  placeholder="e.g., 100"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="budget">Budget Range</Label>
                <Input
                  id="budget"
                  value={coupleInfo.budget}
                  onChange={(e) => handleInputChange("budget", e.target.value)}
                  placeholder="e.g., $15,000-$25,000"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="weddingStyle">Wedding Style</Label>
                <select
                  id="weddingStyle"
                  value={coupleInfo.weddingStyle}
                  onChange={(e) => handleInputChange("weddingStyle", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="">Select style</option>
                  <option value="romantic">Romantic</option>
                  <option value="rustic">Rustic</option>
                  <option value="bohemian">Bohemian</option>
                  <option value="garden">Garden</option>
                  <option value="prairie">Prairie</option>
                  <option value="farm-to-table">Farm-to-Table</option>
                  <option value="vintage">Vintage</option>
                  <option value="modern">Modern</option>
                </select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="colorScheme">Color Scheme</Label>
              <Input
                id="colorScheme"
                value={coupleInfo.colorScheme}
                onChange={(e) => handleInputChange("colorScheme", e.target.value)}
                placeholder="e.g., Soft pastels, Wildflowers, Earth tones"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="dietaryRestrictions">Dietary Restrictions</Label>
              <Textarea
                id="dietaryRestrictions"
                value={coupleInfo.dietaryRestrictions}
                onChange={(e) => handleInputChange("dietaryRestrictions", e.target.value)}
                placeholder="Any allergies, vegetarian preferences, etc."
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="specialRequests">Special Requests</Label>
              <Textarea
                id="specialRequests"
                value={coupleInfo.specialRequests}
                onChange={(e) => handleInputChange("specialRequests", e.target.value)}
                placeholder="Ceremony preferences, cultural elements, special moments..."
                rows={3}
              />
            </div>

            <Button
              onClick={generateWeddingPlan}
              disabled={loading}
              className="w-full"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Generating Plan...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4 mr-2" />
                  Generate AI Wedding Plan
                </>
              )}
            </Button>

            {error && (
              <div className="text-red-600 text-sm mt-2 p-2 bg-red-50 rounded">
                {error}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Generated Plan */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5" />
              AI Wedding Plan
            </CardTitle>
            <CardDescription>
              Personalized recommendations based on your preferences
            </CardDescription>
          </CardHeader>
          <CardContent>
            {weddingPlan ? (
              <div className="space-y-6">
                {/* Timeline */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Calendar className="h-4 w-4" />
                    Wedding Day Timeline
                  </h4>
                  <div className="space-y-2">
                    {weddingPlan.timeline.map((item, index) => (
                      <div key={index} className="flex items-start gap-3 p-2 bg-blue-50 rounded">
                        <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center text-xs font-medium">
                          {index + 1}
                        </div>
                        <div className="text-sm">{item}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Vendors */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Users className="h-4 w-4" />
                    Vendor Recommendations
                  </h4>
                  <div className="space-y-2">
                    {weddingPlan.vendorRecommendations.map((vendor, index) => (
                      <div key={index} className="p-2 bg-green-50 rounded text-sm">
                        {vendor}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Seasonal */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Flower className="h-4 w-4" />
                    Seasonal Considerations
                  </h4>
                  <div className="space-y-2">
                    {weddingPlan.seasonalConsiderations.map((item, index) => (
                      <div key={index} className="p-2 bg-purple-50 rounded text-sm">
                        {item}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Budget */}
                <div>
                  <h4 className="font-semibold mb-3">Budget Breakdown</h4>
                  <div className="space-y-2">
                    {weddingPlan.budgetBreakdown.map((item, index) => (
                      <div key={index} className="p-2 bg-orange-50 rounded text-sm">
                        {item}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Tips */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Heart className="h-4 w-4" />
                    Personalized Tips
                  </h4>
                  <div className="space-y-2">
                    {weddingPlan.personalizedTips.map((tip, index) => (
                      <div key={index} className="p-2 bg-pink-50 rounded text-sm">
                        {tip}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                <Button onClick={exportPlan} className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Export Wedding Plan
                </Button>
              </div>
            ) : (
              <div className="text-center py-12">
                <Sparkles className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Ready to Plan Your Dream Wedding</h3>
                <p className="text-muted-foreground">
                  Fill out the form and let AI create a personalized wedding plan
                  tailored to your preferences and Little Bow Meadows' beautiful setting.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
