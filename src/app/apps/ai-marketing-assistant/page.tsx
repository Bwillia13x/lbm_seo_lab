"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  Sparkles,
  TrendingUp,
  Target,
  Mail,
  Instagram,
  Facebook,
  Users,
  DollarSign,
  BarChart3,
  RefreshCw,
  Download,
  Megaphone
} from "lucide-react";
import { aiChatSafe } from "@/lib/ai";

interface MarketingStrategy {
  campaignOverview: string;
  targetAudience: string[];
  channelStrategy: {
    platform: string;
    contentType: string;
    frequency: string;
    goals: string[];
  }[];
  contentCalendar: {
    week: string;
    focus: string;
    posts: string[];
  }[];
  budgetAllocation: string[];
  successMetrics: string[];
  timeline: string[];
}

export default function AIMarketingAssistant() {
  const [marketingRequest, setMarketingRequest] = useState({
    businessGoal: "",
    targetAudience: "",
    budget: "",
    timeframe: "",
    currentChallenges: "",
    competitors: "",
    uniqueSellingPoints: "",
    seasonalFocus: ""
  });

  const [strategy, setStrategy] = useState<MarketingStrategy | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const generateStrategy = async () => {
    setLoading(true);
    setError("");

    try {
      const prompt = `Create a comprehensive marketing strategy for Little Bow Meadows farm-to-table wedding venue and floral farm.

Business Goal: ${marketingRequest.businessGoal}
Target Audience: ${marketingRequest.targetAudience}
Budget: ${marketingRequest.budget}
Timeframe: ${marketingRequest.timeframe}
Current Challenges: ${marketingRequest.currentChallenges}
Competitors: ${marketingRequest.competitors}
Unique Selling Points: ${marketingRequest.uniqueSellingPoints}
Seasonal Focus: ${marketingRequest.seasonalFocus}

Please provide:
1. Campaign overview and objectives
2. Target audience analysis
3. Multi-channel marketing strategy
4. Content calendar for first month
5. Budget allocation recommendations
6. Success metrics and KPIs
7. Implementation timeline

Format as JSON with keys: campaignOverview, targetAudience, channelStrategy (array), contentCalendar (array), budgetAllocation, successMetrics, timeline`;

      const response = await aiChatSafe({
        messages: [{ role: "user", content: prompt }],
        scope: "marketing",
        maxTokens: 900,
        temperature: 0.7
      });

      if (response.ok) {
        try {
          const jsonMatch = response.content.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const parsedStrategy = JSON.parse(jsonMatch[0]);
            setStrategy(parsedStrategy);
          } else {
            setError("Failed to parse AI response. Please try again.");
          }
        } catch (parseError) {
          setError("Error parsing marketing strategy. Please try again.");
        }
      } else {
        setError(response.error || "Failed to generate marketing strategy");
      }
    } catch (err) {
      setError("Network error. Please check your connection and try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setMarketingRequest(prev => ({ ...prev, [field]: value }));
  };

  const exportStrategy = () => {
    if (!strategy) return;

    const strategyText = `
LITTLE BOW MEADOWS MARKETING STRATEGY

CAMPAIGN OVERVIEW:
${strategy.campaignOverview}

TARGET AUDIENCE:
${strategy.targetAudience.map(audience => `• ${audience}`).join('\n')}

CHANNEL STRATEGY:
${strategy.channelStrategy.map(channel => `
${channel.platform}:
  Content Type: ${channel.contentType}
  Frequency: ${channel.frequency}
  Goals: ${channel.goals.join(', ')}
`).join('\n')}

CONTENT CALENDAR:
${strategy.contentCalendar.map(week => `
Week ${week.week} - Focus: ${week.focus}
${week.posts.map(post => `  • ${post}`).join('\n')}
`).join('\n')}

BUDGET ALLOCATION:
${strategy.budgetAllocation.map(allocation => `• ${allocation}`).join('\n')}

SUCCESS METRICS:
${strategy.successMetrics.map(metric => `• ${metric}`).join('\n')}

IMPLEMENTATION TIMELINE:
${strategy.timeline.map(step => `• ${step}`).join('\n')}

Generated by Little Bow Meadows AI Marketing Assistant
    `.trim();

    const blob = new Blob([strategyText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `marketing-strategy-${marketingRequest.businessGoal.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">AI Marketing Assistant</h1>
          <p className="text-muted-foreground">Create data-driven marketing strategies for your farm business</p>
        </div>
        <Badge variant="secondary" className="flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          AI Powered
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Marketing Goals
            </CardTitle>
            <CardDescription>
              Define your marketing objectives and target audience
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="businessGoal">Primary Business Goal</Label>
              <select
                id="businessGoal"
                value={marketingRequest.businessGoal}
                onChange={(e) => handleInputChange("businessGoal", e.target.value)}
                className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
              >
                <option value="">Select goal</option>
                <option value="increase-wedding-bookings">Increase Wedding Bookings</option>
                <option value="grow-product-sales">Grow Farm Product Sales</option>
                <option value="build-brand-awareness">Build Brand Awareness</option>
                <option value="improve-online-reviews">Improve Online Reviews</option>
                <option value="increase-social-followers">Increase Social Media Followers</option>
                <option value="drive-website-traffic">Drive Website Traffic</option>
              </select>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="budget">Marketing Budget</Label>
                <Input
                  id="budget"
                  value={marketingRequest.budget}
                  onChange={(e) => handleInputChange("budget", e.target.value)}
                  placeholder="e.g., $500/month"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="timeframe">Timeframe</Label>
                <select
                  id="timeframe"
                  value={marketingRequest.timeframe}
                  onChange={(e) => handleInputChange("timeframe", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="">Select timeframe</option>
                  <option value="1-month">1 Month</option>
                  <option value="3-months">3 Months</option>
                  <option value="6-months">6 Months</option>
                  <option value="1-year">1 Year</option>
                </select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="targetAudience">Target Audience</Label>
              <Textarea
                id="targetAudience"
                value={marketingRequest.targetAudience}
                onChange={(e) => handleInputChange("targetAudience", e.target.value)}
                placeholder="Describe your ideal customers (age, interests, location, etc.)"
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="uniqueSellingPoints">Unique Selling Points</Label>
              <Textarea
                id="uniqueSellingPoints"
                value={marketingRequest.uniqueSellingPoints}
                onChange={(e) => handleInputChange("uniqueSellingPoints", e.target.value)}
                placeholder="What makes Little Bow Meadows special?"
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="currentChallenges">Current Marketing Challenges</Label>
              <Textarea
                id="currentChallenges"
                value={marketingRequest.currentChallenges}
                onChange={(e) => handleInputChange("currentChallenges", e.target.value)}
                placeholder="What marketing challenges are you facing?"
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="competitors">Key Competitors</Label>
              <Input
                id="competitors"
                value={marketingRequest.competitors}
                onChange={(e) => handleInputChange("competitors", e.target.value)}
                placeholder="e.g., Other wedding venues, floral shops, farms"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="seasonalFocus">Seasonal Focus</Label>
              <select
                id="seasonalFocus"
                value={marketingRequest.seasonalFocus}
                onChange={(e) => handleInputChange("seasonalFocus", e.target.value)}
                className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
              >
                <option value="">Select season</option>
                <option value="spring">Spring (Bloom Season)</option>
                <option value="summer">Summer (Wedding Peak)</option>
                <option value="fall">Fall (Harvest Season)</option>
                <option value="winter">Winter (Holiday Events)</option>
                <option value="year-round">Year-Round Marketing</option>
              </select>
            </div>

            <Button
              onClick={generateStrategy}
              disabled={loading || !marketingRequest.businessGoal.trim()}
              className="w-full"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Creating Strategy...
                </>
              ) : (
                <>
                  <Megaphone className="h-4 w-4 mr-2" />
                  Generate AI Marketing Strategy
                </>
              )}
            </Button>

            {error && (
              <div className="text-red-600 text-sm mt-2 p-2 bg-red-50 rounded">
                {error}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Generated Strategy */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="h-5 w-5" />
              AI Marketing Strategy
            </CardTitle>
            <CardDescription>
              Data-driven marketing plan tailored to your goals
            </CardDescription>
          </CardHeader>
          <CardContent>
            {strategy ? (
              <div className="space-y-6">
                {/* Campaign Overview */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Target className="h-4 w-4" />
                    Campaign Overview
                  </h4>
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <p className="text-sm">{strategy.campaignOverview}</p>
                  </div>
                </div>

                <Separator />

                {/* Target Audience */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Users className="h-4 w-4" />
                    Target Audience
                  </h4>
                  <div className="space-y-2">
                    {strategy.targetAudience.map((audience, index) => (
                      <div key={index} className="p-2 bg-green-50 rounded text-sm">
                        • {audience}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Channel Strategy */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Megaphone className="h-4 w-4" />
                    Channel Strategy
                  </h4>
                  <div className="space-y-3">
                    {strategy.channelStrategy.map((channel, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge variant="outline">{channel.platform}</Badge>
                          <span className="text-sm font-medium">{channel.contentType}</span>
                        </div>
                        <div className="text-sm text-muted-foreground mb-2">
                          Frequency: {channel.frequency}
                        </div>
                        <div className="text-sm">
                          Goals: {channel.goals.join(', ')}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Content Calendar */}
                <div>
                  <h4 className="font-semibold mb-3">Content Calendar (First Month)</h4>
                  <div className="space-y-3">
                    {strategy.contentCalendar.map((week) => (
                      <div key={week.week} className="border rounded-lg p-4">
                        <h5 className="font-medium mb-2">Week {week.week}: {week.focus}</h5>
                        <div className="space-y-1">
                          {week.posts.map((post, index) => (
                            <div key={index} className="text-sm p-2 bg-purple-50 rounded">
                              • {post}
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Budget Allocation */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <DollarSign className="h-4 w-4" />
                    Budget Allocation
                  </h4>
                  <div className="space-y-2">
                    {strategy.budgetAllocation.map((allocation, index) => (
                      <div key={index} className="p-2 bg-orange-50 rounded text-sm">
                        • {allocation}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Success Metrics */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <TrendingUp className="h-4 w-4" />
                    Success Metrics
                  </h4>
                  <div className="space-y-2">
                    {strategy.successMetrics.map((metric, index) => (
                      <div key={index} className="p-2 bg-green-50 rounded text-sm">
                        • {metric}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Timeline */}
                <div>
                  <h4 className="font-semibold mb-3">Implementation Timeline</h4>
                  <div className="space-y-2">
                    {strategy.timeline.map((step, index) => (
                      <div key={index} className="flex items-start gap-3 p-2 bg-blue-50 rounded">
                        <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center text-xs font-medium">
                          {index + 1}
                        </div>
                        <div className="text-sm">{step}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                <Button onClick={exportStrategy} className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Export Marketing Strategy
                </Button>
              </div>
            ) : (
              <div className="text-center py-12">
                <Target className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Ready to Create Your Marketing Strategy</h3>
                <p className="text-muted-foreground">
                  Fill out your marketing goals and let AI create a comprehensive,
                  data-driven marketing strategy for Little Bow Meadows.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
