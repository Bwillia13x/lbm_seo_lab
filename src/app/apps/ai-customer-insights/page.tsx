"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  Sparkles,
  Users,
  TrendingUp,
  MessageSquare,
  Heart,
  Star,
  Target,
  RefreshCw,
  Download,
  BarChart3
} from "lucide-react";
import { aiChatSafe } from "@/lib/ai";

interface CustomerInsights {
  customerProfile: string;
  preferences: string[];
  engagementPatterns: string[];
  recommendations: string[];
  retentionStrategies: string[];
  marketingSuggestions: string[];
}

export default function AICustomerInsights() {
  const [customerData, setCustomerData] = useState({
    customerType: "",
    interactionHistory: "",
    purchaseHistory: "",
    feedback: "",
    demographics: "",
    preferences: "",
    painPoints: ""
  });

  const [insights, setInsights] = useState<CustomerInsights | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const analyzeCustomer = async () => {
    setLoading(true);
    setError("");

    try {
      const prompt = `Analyze customer data for Little Bow Meadows farm-to-table wedding venue and provide actionable insights.

Customer Type: ${customerData.customerType}
Interaction History: ${customerData.interactionHistory}
Purchase History: ${customerData.purchaseHistory}
Feedback/Reviews: ${customerData.feedback}
Demographics: ${customerData.demographics}
Preferences: ${customerData.preferences}
Pain Points: ${customerData.painPoints}

Please provide a comprehensive analysis including:
1. Customer profile summary
2. Key preferences and interests
3. Engagement patterns and behaviors
4. Personalized recommendations
5. Customer retention strategies
6. Marketing suggestions

Format as JSON with keys: customerProfile, preferences, engagementPatterns, recommendations, retentionStrategies, marketingSuggestions`;

      const response = await aiChatSafe({
        messages: [{ role: "user", content: prompt }],
        scope: "customer-service",
        maxTokens: 700,
        temperature: 0.6
      });

      if (response.ok) {
        try {
          const jsonMatch = response.content.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const parsedInsights = JSON.parse(jsonMatch[0]);
            setInsights(parsedInsights);
          } else {
            setError("Failed to parse AI response. Please try again.");
          }
        } catch (parseError) {
          setError("Error parsing insights. Please try again.");
        }
      } else {
        setError(response.error || "Failed to analyze customer data");
      }
    } catch (err) {
      setError("Network error. Please check your connection and try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setCustomerData(prev => ({ ...prev, [field]: value }));
  };

  const exportInsights = () => {
    if (!insights) return;

    const insightsText = `
CUSTOMER INSIGHTS ANALYSIS
Little Bow Meadows

CUSTOMER PROFILE:
${insights.customerProfile}

KEY PREFERENCES:
${insights.preferences.map(pref => `• ${pref}`).join('\n')}

ENGAGEMENT PATTERNS:
${insights.engagementPatterns.map(pattern => `• ${pattern}`).join('\n')}

PERSONALIZED RECOMMENDATIONS:
${insights.recommendations.map(rec => `• ${rec}`).join('\n')}

RETENTION STRATEGIES:
${insights.retentionStrategies.map(strategy => `• ${strategy}`).join('\n')}

MARKETING SUGGESTIONS:
${insights.marketingSuggestions.map(suggestion => `• ${suggestion}`).join('\n')}

Generated by Little Bow Meadows AI Customer Insights
    `.trim();

    const blob = new Blob([insightsText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `customer-insights-${customerData.customerType.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">AI Customer Insights</h1>
          <p className="text-muted-foreground">Understand your customers with AI-powered analysis</p>
        </div>
        <Badge variant="secondary" className="flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          AI Powered
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Customer Data
            </CardTitle>
            <CardDescription>
              Enter customer information for AI analysis
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="customerType">Customer Type</Label>
              <select
                id="customerType"
                value={customerData.customerType}
                onChange={(e) => handleInputChange("customerType", e.target.value)}
                className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
              >
                <option value="">Select customer type</option>
                <option value="wedding-couple">Wedding Couple</option>
                <option value="floral-customer">Floral Customer</option>
                <option value="event-planner">Event Planner</option>
                <option value="local-resident">Local Resident</option>
                <option value="tourist">Tourist</option>
                <option value="corporate-client">Corporate Client</option>
              </select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="demographics">Demographics</Label>
              <Textarea
                id="demographics"
                value={customerData.demographics}
                onChange={(e) => handleInputChange("demographics", e.target.value)}
                placeholder="Age, location, occupation, family status..."
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="purchaseHistory">Purchase History</Label>
              <Textarea
                id="purchaseHistory"
                value={customerData.purchaseHistory}
                onChange={(e) => handleInputChange("purchaseHistory", e.target.value)}
                placeholder="Previous orders, frequency, average spend..."
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="interactionHistory">Interaction History</Label>
              <Textarea
                id="interactionHistory"
                value={customerData.interactionHistory}
                onChange={(e) => handleInputChange("interactionHistory", e.target.value)}
                placeholder="Website visits, email opens, social media engagement..."
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="preferences">Preferences & Interests</Label>
              <Textarea
                id="preferences"
                value={customerData.preferences}
                onChange={(e) => handleInputChange("preferences", e.target.value)}
                placeholder="Favorite flowers, dietary preferences, wedding style..."
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="feedback">Feedback & Reviews</Label>
              <Textarea
                id="feedback"
                value={customerData.feedback}
                onChange={(e) => handleInputChange("feedback", e.target.value)}
                placeholder="Customer reviews, comments, suggestions..."
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="painPoints">Pain Points</Label>
              <Textarea
                id="painPoints"
                value={customerData.painPoints}
                onChange={(e) => handleInputChange("painPoints", e.target.value)}
                placeholder="Issues, concerns, areas for improvement..."
                rows={2}
              />
            </div>

            <Button
              onClick={analyzeCustomer}
              disabled={loading || !customerData.customerType.trim()}
              className="w-full"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Analyzing Customer...
                </>
              ) : (
                <>
                  <BarChart3 className="h-4 w-4 mr-2" />
                  Generate AI Insights
                </>
              )}
            </Button>

            {error && (
              <div className="text-red-600 text-sm mt-2 p-2 bg-red-50 rounded">
                {error}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Generated Insights */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              AI Customer Insights
            </CardTitle>
            <CardDescription>
              Personalized analysis and recommendations
            </CardDescription>
          </CardHeader>
          <CardContent>
            {insights ? (
              <div className="space-y-6">
                {/* Customer Profile */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Users className="h-4 w-4" />
                    Customer Profile
                  </h4>
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <p className="text-sm">{insights.customerProfile}</p>
                  </div>
                </div>

                <Separator />

                {/* Preferences */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Heart className="h-4 w-4" />
                    Key Preferences
                  </h4>
                  <div className="space-y-2">
                    {insights.preferences.map((pref, index) => (
                      <div key={index} className="flex items-start gap-3 p-2 bg-pink-50 rounded">
                        <div className="w-6 h-6 bg-pink-100 rounded-full flex items-center justify-center text-xs font-medium">
                          {index + 1}
                        </div>
                        <div className="text-sm">{pref}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Engagement Patterns */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <TrendingUp className="h-4 w-4" />
                    Engagement Patterns
                  </h4>
                  <div className="space-y-2">
                    {insights.engagementPatterns.map((pattern, index) => (
                      <div key={index} className="p-2 bg-green-50 rounded text-sm">
                        • {pattern}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Recommendations */}
                <div>
                  <h4 className="font-semibold mb-3">Personalized Recommendations</h4>
                  <div className="space-y-2">
                    {insights.recommendations.map((rec, index) => (
                      <div key={index} className="p-2 bg-purple-50 rounded text-sm">
                        {rec}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Retention Strategies */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Star className="h-4 w-4" />
                    Retention Strategies
                  </h4>
                  <div className="space-y-2">
                    {insights.retentionStrategies.map((strategy, index) => (
                      <div key={index} className="p-2 bg-orange-50 rounded text-sm">
                        • {strategy}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Marketing Suggestions */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <MessageSquare className="h-4 w-4" />
                    Marketing Suggestions
                  </h4>
                  <div className="space-y-2">
                    {insights.marketingSuggestions.map((suggestion, index) => (
                      <div key={index} className="p-2 bg-blue-50 rounded text-sm">
                        • {suggestion}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                <Button onClick={exportInsights} className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Export Insights Report
                </Button>
              </div>
            ) : (
              <div className="text-center py-12">
                <Target className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Ready for Customer Analysis</h3>
                <p className="text-muted-foreground">
                  Enter customer information and let AI provide deep insights
                  to improve your service and marketing strategies.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
