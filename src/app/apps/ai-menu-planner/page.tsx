"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  Sparkles,
  ChefHat,
  Users,
  Calendar,
  Leaf,
  Wheat,
  Apple,
  RefreshCw,
  Download,
  Utensils
} from "lucide-react";
import { aiChatSafe } from "@/lib/ai";

interface MenuPlan {
  theme: string;
  courses: {
    name: string;
    description: string;
    ingredients: string[];
    dietaryNotes: string[];
  }[];
  seasonalIngredients: string[];
  preparationTimeline: string[];
  servingSuggestions: string[];
  estimatedCosts: string[];
}

export default function AIMenuPlanner() {
  const [menuRequest, setMenuRequest] = useState({
    occasion: "",
    guestCount: "",
    dietaryRestrictions: "",
    season: "",
    budget: "",
    cuisineStyle: "",
    specialRequirements: "",
    allergies: ""
  });

  const [menuPlan, setMenuPlan] = useState<MenuPlan | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const generateMenu = async () => {
    setLoading(true);
    setError("");

    try {
      const prompt = `Create a farm-to-table menu plan for Little Bow Meadows wedding venue using seasonal, local ingredients.

Occasion: ${menuRequest.occasion}
Guests: ${menuRequest.guestCount}
Dietary Restrictions: ${menuRequest.dietaryRestrictions}
Season: ${menuRequest.season}
Budget: ${menuRequest.budget}
Cuisine Style: ${menuRequest.cuisineStyle}
Special Requirements: ${menuRequest.specialRequirements}
Allergies: ${menuRequest.allergies}

Please create a comprehensive menu including:
1. Menu theme and concept
2. Multi-course menu with descriptions
3. Seasonal ingredient highlights
4. Preparation timeline
5. Serving suggestions
6. Estimated costs

Format as JSON with keys: theme, courses (array with name, description, ingredients, dietaryNotes), seasonalIngredients, preparationTimeline, servingSuggestions, estimatedCosts`;

      const response = await aiChatSafe({
        messages: [{ role: "user", content: prompt }],
        scope: "wedding",
        maxTokens: 800,
        temperature: 0.7
      });

      if (response.ok) {
        try {
          const jsonMatch = response.content.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const parsedMenu = JSON.parse(jsonMatch[0]);
            setMenuPlan(parsedMenu);
          } else {
            setError("Failed to parse AI response. Please try again.");
          }
        } catch (parseError) {
          setError("Error parsing menu plan. Please try again.");
        }
      } else {
        setError(response.error || "Failed to generate menu plan");
      }
    } catch (err) {
      setError("Network error. Please check your connection and try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setMenuRequest(prev => ({ ...prev, [field]: value }));
  };

  const exportMenu = () => {
    if (!menuPlan) return;

    const menuText = `
FARM-TO-TABLE MENU PLAN
Little Bow Meadows

THEME: ${menuPlan.theme}

MENU COURSES:
${menuPlan.courses.map((course, index) => `
${index + 1}. ${course.name}
   ${course.description}
   Ingredients: ${course.ingredients.join(', ')}
   Dietary Notes: ${course.dietaryNotes.join(', ')}
`).join('\n')}

SEASONAL INGREDIENTS:
${menuPlan.seasonalIngredients.map(ingredient => `• ${ingredient}`).join('\n')}

PREPARATION TIMELINE:
${menuPlan.preparationTimeline.map(step => `• ${step}`).join('\n')}

SERVING SUGGESTIONS:
${menuPlan.servingSuggestions.map(suggestion => `• ${suggestion}`).join('\n')}

ESTIMATED COSTS:
${menuPlan.estimatedCosts.map(cost => `• ${cost}`).join('\n')}

Generated by Little Bow Meadows AI Menu Planner
    `.trim();

    const blob = new Blob([menuText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `menu-plan-${menuRequest.occasion.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">AI Menu Planner</h1>
          <p className="text-muted-foreground">Create farm-to-table menus with seasonal ingredients</p>
        </div>
        <Badge variant="secondary" className="flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          AI Powered
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ChefHat className="h-5 w-5" />
              Menu Requirements
            </CardTitle>
            <CardDescription>
              Tell us about your event and guest preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="occasion">Occasion/Event Type</Label>
              <select
                id="occasion"
                value={menuRequest.occasion}
                onChange={(e) => handleInputChange("occasion", e.target.value)}
                className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
              >
                <option value="">Select occasion</option>
                <option value="wedding-reception">Wedding Reception</option>
                <option value="wedding-ceremony">Wedding Ceremony</option>
                <option value="engagement-party">Engagement Party</option>
                <option value="corporate-event">Corporate Event</option>
                <option value="birthday-party">Birthday Party</option>
                <option value="anniversary">Anniversary Celebration</option>
                <option value="private-dinner">Private Dinner</option>
              </select>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="guestCount">Number of Guests</Label>
                <Input
                  id="guestCount"
                  type="number"
                  value={menuRequest.guestCount}
                  onChange={(e) => handleInputChange("guestCount", e.target.value)}
                  placeholder="e.g., 50"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="season">Season</Label>
                <select
                  id="season"
                  value={menuRequest.season}
                  onChange={(e) => handleInputChange("season", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="">Select season</option>
                  <option value="spring">Spring</option>
                  <option value="summer">Summer</option>
                  <option value="fall">Fall</option>
                  <option value="winter">Winter</option>
                </select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="budget">Budget per Person</Label>
                <Input
                  id="budget"
                  value={menuRequest.budget}
                  onChange={(e) => handleInputChange("budget", e.target.value)}
                  placeholder="e.g., $50-$100"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="cuisineStyle">Cuisine Style</Label>
                <select
                  id="cuisineStyle"
                  value={menuRequest.cuisineStyle}
                  onChange={(e) => handleInputChange("cuisineStyle", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="">Select style</option>
                  <option value="farm-to-table">Farm-to-Table</option>
                  <option value="local-organic">Local Organic</option>
                  <option value="seasonal">Seasonal</option>
                  <option value="mediterranean">Mediterranean</option>
                  <option value="italian">Italian</option>
                  <option value="french">French</option>
                  <option value="fusion">Fusion</option>
                </select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="dietaryRestrictions">Dietary Restrictions</Label>
              <Textarea
                id="dietaryRestrictions"
                value={menuRequest.dietaryRestrictions}
                onChange={(e) => handleInputChange("dietaryRestrictions", e.target.value)}
                placeholder="Vegetarian, vegan, gluten-free, etc."
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="allergies">Allergies</Label>
              <Textarea
                id="allergies"
                value={menuRequest.allergies}
                onChange={(e) => handleInputChange("allergies", e.target.value)}
                placeholder="Nuts, dairy, shellfish, etc."
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="specialRequirements">Special Requirements</Label>
              <Textarea
                id="specialRequirements"
                value={menuRequest.specialRequirements}
                onChange={(e) => handleInputChange("specialRequirements", e.target.value)}
                placeholder="Themed elements, presentation preferences, timing requirements..."
                rows={3}
              />
            </div>

            <Button
              onClick={generateMenu}
              disabled={loading || !menuRequest.occasion.trim() || !menuRequest.guestCount.trim()}
              className="w-full"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Creating Menu Plan...
                </>
              ) : (
                <>
                  <ChefHat className="h-4 w-4 mr-2" />
                  Generate AI Menu Plan
                </>
              )}
            </Button>

            {error && (
              <div className="text-red-600 text-sm mt-2 p-2 bg-red-50 rounded">
                {error}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Generated Menu */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Utensils className="h-5 w-5" />
              AI Menu Plan
            </CardTitle>
            <CardDescription>
              Farm-fresh menu with seasonal ingredients
            </CardDescription>
          </CardHeader>
          <CardContent>
            {menuPlan ? (
              <div className="space-y-6">
                {/* Theme */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Sparkles className="h-4 w-4" />
                    Menu Theme
                  </h4>
                  <div className="p-4 bg-purple-50 rounded-lg">
                    <p className="text-sm font-medium">{menuPlan.theme}</p>
                  </div>
                </div>

                <Separator />

                {/* Courses */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <ChefHat className="h-4 w-4" />
                    Menu Courses
                  </h4>
                  <div className="space-y-4">
                    {menuPlan.courses.map((course, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge variant="outline">{index + 1}</Badge>
                          <h5 className="font-medium">{course.name}</h5>
                        </div>
                        <p className="text-sm text-muted-foreground mb-3">{course.description}</p>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Label className="text-xs text-muted-foreground">Ingredients</Label>
                            <div className="text-sm">
                              {course.ingredients.map((ingredient, i) => (
                                <span key={i} className="inline-block mr-2 mb-1">
                                  • {ingredient}
                                </span>
                              ))}
                            </div>
                          </div>
                          <div>
                            <Label className="text-xs text-muted-foreground">Dietary Notes</Label>
                            <div className="text-sm">
                              {course.dietaryNotes.map((note, i) => (
                                <span key={i} className="inline-block mr-2 mb-1">
                                  • {note}
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Seasonal Ingredients */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Leaf className="h-4 w-4" />
                    Seasonal Ingredients
                  </h4>
                  <div className="grid grid-cols-2 gap-2">
                    {menuPlan.seasonalIngredients.map((ingredient, index) => (
                      <div key={index} className="p-2 bg-green-50 rounded text-sm">
                        {ingredient}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Preparation Timeline */}
                <div>
                  <h4 className="font-semibold flex items-center gap-2 mb-3">
                    <Calendar className="h-4 w-4" />
                    Preparation Timeline
                  </h4>
                  <div className="space-y-2">
                    {menuPlan.preparationTimeline.map((step, index) => (
                      <div key={index} className="flex items-start gap-3 p-2 bg-blue-50 rounded">
                        <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center text-xs font-medium">
                          {index + 1}
                        </div>
                        <div className="text-sm">{step}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Serving Suggestions */}
                <div>
                  <h4 className="font-semibold mb-3">Serving Suggestions</h4>
                  <div className="space-y-2">
                    {menuPlan.servingSuggestions.map((suggestion, index) => (
                      <div key={index} className="p-2 bg-orange-50 rounded text-sm">
                        • {suggestion}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                {/* Estimated Costs */}
                <div>
                  <h4 className="font-semibold mb-3">Estimated Costs</h4>
                  <div className="space-y-2">
                    {menuPlan.estimatedCosts.map((cost, index) => (
                      <div key={index} className="p-2 bg-gray-50 rounded text-sm">
                        • {cost}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                <Button onClick={exportMenu} className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Export Menu Plan
                </Button>
              </div>
            ) : (
              <div className="text-center py-12">
                <ChefHat className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Ready to Create Amazing Menus</h3>
                <p className="text-muted-foreground">
                  Fill out the form and let AI create a farm-to-table menu plan
                  using seasonal ingredients from Little Bow Meadows.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
