"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  Sparkles,
  FileText,
  Instagram,
  Facebook,
  Mail,
  Globe,
  Copy,
  Download,
  RefreshCw,
  MessageSquare,
  Image as ImageIcon
} from "lucide-react";
import { aiChatSafe } from "@/lib/ai";

interface GeneratedContent {
  title: string;
  content: string;
  hashtags: string[];
  platforms: string[];
  tips: string[];
}

export default function AIContentWriter() {
  const [contentRequest, setContentRequest] = useState({
    topic: "",
    platform: "instagram",
    tone: "professional",
    length: "medium",
    audience: "wedding-couples",
    keywords: "",
    specialInstructions: ""
  });

  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const generateContent = async () => {
    setLoading(true);
    setError("");

    try {
      const prompt = `Create engaging content for Little Bow Meadows farm-to-table wedding venue and floral farm.

Topic: ${contentRequest.topic}
Platform: ${contentRequest.platform}
Tone: ${contentRequest.tone}
Length: ${contentRequest.length}
Audience: ${contentRequest.audience}
Keywords: ${contentRequest.keywords}
Special Instructions: ${contentRequest.specialInstructions}

Please provide:
1. An engaging title/headline
2. Well-written content appropriate for the platform and audience
3. Relevant hashtags for the topic
4. Platform-specific formatting suggestions
5. Engagement tips for better reach

Format as JSON with keys: title, content, hashtags, platforms, tips`;

      const response = await aiChatSafe({
        messages: [{ role: "user", content: prompt }],
        scope: "marketing",
        maxTokens: 600,
        temperature: 0.8
      });

      if (response.ok) {
        try {
          const jsonMatch = response.content.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const parsedContent = JSON.parse(jsonMatch[0]);
            setGeneratedContent(parsedContent);
          } else {
            setError("Failed to parse AI response. Please try again.");
          }
        } catch (parseError) {
          setError("Error parsing content. Please try again.");
        }
      } else {
        setError(response.error || "Failed to generate content");
      }
    } catch (err) {
      setError("Network error. Please check your connection and try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setContentRequest(prev => ({ ...prev, [field]: value }));
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    // Could add a toast notification here
  };

  const exportContent = () => {
    if (!generatedContent) return;

    const contentText = `
${generatedContent.title}

${generatedContent.content}

Hashtags: ${generatedContent.hashtags.join(' ')}

Platform Tips:
${generatedContent.tips.map(tip => `â€¢ ${tip}`).join('\n')}

Generated by Little Bow Meadows AI Content Writer
    `.trim();

    const blob = new Blob([contentText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `content-${contentRequest.topic.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const platformIcons = {
    instagram: Instagram,
    facebook: Facebook,
    email: Mail,
    website: Globe,
    blog: FileText
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">AI Content Writer</h1>
          <p className="text-muted-foreground">Generate engaging content for your farm business</p>
        </div>
        <Badge variant="secondary" className="flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          AI Powered
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              Content Request
            </CardTitle>
            <CardDescription>
              Tell AI what kind of content you need
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="topic">Topic or Theme</Label>
              <Input
                id="topic"
                value={contentRequest.topic}
                onChange={(e) => handleInputChange("topic", e.target.value)}
                placeholder="e.g., Spring wedding flowers, Farm-to-table menu, Prairie wedding tips"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="platform">Platform</Label>
                <select
                  id="platform"
                  value={contentRequest.platform}
                  onChange={(e) => handleInputChange("platform", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="instagram">Instagram</option>
                  <option value="facebook">Facebook</option>
                  <option value="email">Email Newsletter</option>
                  <option value="website">Website Blog</option>
                  <option value="blog">Blog Post</option>
                </select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="tone">Tone</Label>
                <select
                  id="tone"
                  value={contentRequest.tone}
                  onChange={(e) => handleInputChange("tone", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="professional">Professional</option>
                  <option value="casual">Casual</option>
                  <option value="romantic">Romantic</option>
                  <option value="inspirational">Inspirational</option>
                  <option value="educational">Educational</option>
                </select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="length">Content Length</Label>
                <select
                  id="length"
                  value={contentRequest.length}
                  onChange={(e) => handleInputChange("length", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="short">Short (50-100 words)</option>
                  <option value="medium">Medium (100-250 words)</option>
                  <option value="long">Long (250-500 words)</option>
                </select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="audience">Target Audience</Label>
                <select
                  id="audience"
                  value={contentRequest.audience}
                  onChange={(e) => handleInputChange("audience", e.target.value)}
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  <option value="wedding-couples">Wedding Couples</option>
                  <option value="local-community">Local Community</option>
                  <option value="tourists">Tourists</option>
                  <option value="flower-customers">Flower Customers</option>
                  <option value="food-lovers">Food Lovers</option>
                </select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="keywords">Keywords (optional)</Label>
              <Input
                id="keywords"
                value={contentRequest.keywords}
                onChange={(e) => handleInputChange("keywords", e.target.value)}
                placeholder="e.g., prairie wedding, wildflowers, farm fresh, outdoor ceremony"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="specialInstructions">Special Instructions</Label>
              <Textarea
                id="specialInstructions"
                value={contentRequest.specialInstructions}
                onChange={(e) => handleInputChange("specialInstructions", e.target.value)}
                placeholder="Any specific details, calls-to-action, or requirements..."
                rows={3}
              />
            </div>

            <Button
              onClick={generateContent}
              disabled={loading || !contentRequest.topic.trim()}
              className="w-full"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Generating Content...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4 mr-2" />
                  Generate AI Content
                </>
              )}
            </Button>

            {error && (
              <div className="text-red-600 text-sm mt-2 p-2 bg-red-50 rounded">
                {error}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Generated Content */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Generated Content
            </CardTitle>
            <CardDescription>
              AI-crafted content ready for your platform
            </CardDescription>
          </CardHeader>
          <CardContent>
            {generatedContent ? (
              <div className="space-y-6">
                {/* Title */}
                <div>
                  <h3 className="text-xl font-bold mb-2">{generatedContent.title}</h3>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(generatedContent.title)}
                    className="mb-2"
                  >
                    <Copy className="h-4 w-4 mr-2" />
                    Copy Title
                  </Button>
                </div>

                {/* Content */}
                <div>
                  <Label className="text-sm font-medium mb-2 block">Content</Label>
                  <div className="p-4 bg-gray-50 rounded-lg whitespace-pre-wrap text-sm">
                    {generatedContent.content}
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(generatedContent.content)}
                    className="mt-2"
                  >
                    <Copy className="h-4 w-4 mr-2" />
                    Copy Content
                  </Button>
                </div>

                {/* Hashtags */}
                <div>
                  <Label className="text-sm font-medium mb-2 block">Hashtags</Label>
                  <div className="flex flex-wrap gap-2">
                    {generatedContent.hashtags.map((hashtag, index) => (
                      <Badge key={index} variant="secondary">
                        {hashtag}
                      </Badge>
                    ))}
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(generatedContent.hashtags.join(' '))}
                    className="mt-2"
                  >
                    <Copy className="h-4 w-4 mr-2" />
                    Copy Hashtags
                  </Button>
                </div>

                {/* Platform Tips */}
                <div>
                  <Label className="text-sm font-medium mb-2 block">Platform Tips</Label>
                  <div className="space-y-2">
                    {generatedContent.tips.map((tip, index) => (
                      <div key={index} className="p-2 bg-blue-50 rounded text-sm">
                        â€¢ {tip}
                      </div>
                    ))}
                  </div>
                </div>

                <Separator />

                <Button onClick={exportContent} className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Export Content
                </Button>
              </div>
            ) : (
              <div className="text-center py-12">
                <FileText className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Ready to Create Amazing Content</h3>
                <p className="text-muted-foreground">
                  Fill out the form and let AI generate engaging content tailored
                  to your farm business and chosen platform.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
